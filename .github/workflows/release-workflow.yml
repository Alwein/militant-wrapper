name: Release - Mobile App

on:
  push:
    tags:
      - "*"

jobs:
  pre-build:
    runs-on: ubuntu-latest
    name: pre-build
    steps:
      - name: Get current timestamp
        id: getCurrentTimestamp
        run: echo "date=$(date +%s)" >> "$GITHUB_OUTPUT"
    outputs:
      date: ${{ steps.getCurrentTimestamp.outputs.date }}

  build-android-prod:
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - uses: actions/checkout@v4

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Write key properties
        shell: bash
        run: |
          echo "$KEY_PROPERTIES_B64" | base64 --decode > android/key.properties
        env:
          KEY_PROPERTIES_B64: ${{ secrets.KEY_PROPERTIES_B64 }}

      - name: Write key store
        shell: bash
        run: |
          mkdir android/keystore
          echo "$KEYSTORE_B64" | base64 --decode > android/picardie_debout.jks
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE_B64 }}

      - name: Write env
        shell: bash
        run: |
          echo "$RUNTIME_ENV_B64" | base64 --decode > env/.env
        env:
          RUNTIME_ENV_B64: ${{ secrets.RUNTIME_ENV_B64 }}

      - name: Build Android appbundle
        run: |
          flutter pub get
          flutter build appbundle \
          --build-number=${{ needs.pre-build.outputs.date }}

      - name: Deploy Android appbundle
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PROD_GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: fr.debout
          releaseName: ${{github.ref_name}}
          releaseFiles: build/app/outputs/bundle/release/app.aab
          track: production
          status: completed

  build-ios-prod:
    runs-on: macos-latest
    needs: pre-build
    steps:
      - uses: actions/checkout@v4

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/myvars.env

      - uses: subosito/flutter-action@v2
        with:
          cache: true
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Codemagic CLI tools
        shell: bash
        run: |
          pip3 install codemagic-cli-tools

      - name: Write env
        shell: bash
        run: |
          echo "$RUNTIME_ENV_B64" | base64 --decode > env/.env.prod
        env:
          RUNTIME_ENV_B64: ${{ secrets.RUNTIME_ENV_B64 }}

      - name: Install Flutter dependencies
        shell: bash
        run: |
          flutter pub get

      - name: Install CocoaPods dependencies
        shell: bash
        run: |
          find . -name "Podfile" -execdir pod install \;

      - name: Install FlutterFire CLI
        shell: bash
        run: |
          dart pub global activate flutterfire_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Write Apple prod API Key
        shell: bash
        run: |
          mkdir ~/.private_keys
          echo "$APPLE_PROD_API_KEY_B64" | base64 --decode > ios/AuthKey_"$APPLE_PROD_API_KEY".p8
        env:
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_PROD_API_KEY_B64: ${{ secrets.APPLE_PROD_API_KEY_B64 }}


      - name: Set up a temporary keychain for code signing
        shell: bash
        run: |
          keychain initialize

      - name: Fetch the code signing files from App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect fetch-signing-files fr.debout \
            --platform IOS \
            --type IOS_APP_STORE \
            --certificate-key=@env:APPLE_P12_PRIVATE_KEY \
            --create
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}

      - name: Add fetched certificates to keychain
        shell: bash
        run: |
          keychain add-certificates

      - name: Update Xcode project settings with fetched code signing profiles and create prod_export_options.plist
        shell: bash
        run: |
          xcode-project use-profiles --export-options-plist ios/prod_export_options.plist

      - name: Build IPA with generated prod_export_options.plist
        shell: bash
        run: |
          flutter build ipa \
          --release \
          --build-number=${{ needs.pre-build.outputs.date }} \
          --export-options-plist=ios/prod_export_options.plist \
          --no-pub
          
      - name: Deploy app to App Store Connect
        shell: bash
        run: |
          export APP_STORE_CONNECT_ISSUER_ID="$APPLE_PROD_API_ISSUER"
          export APP_STORE_CONNECT_KEY_IDENTIFIER="$APPLE_PROD_API_KEY"
          export APP_STORE_CONNECT_PRIVATE_KEY=`cat ios/AuthKey_"$APPLE_PROD_API_KEY".p8`
          app-store-connect publish \
            --path build/ios/ipa/*.ipa
        env:
          APPLE_PROD_API_ISSUER: ${{ secrets.APPLE_PROD_API_ISSUER }}
          APPLE_PROD_API_KEY: ${{ secrets.APPLE_PROD_API_KEY }}
          APPLE_P12_PRIVATE_KEY: ${{secrets.APPLE_P12_PRIVATE_KEY}}
